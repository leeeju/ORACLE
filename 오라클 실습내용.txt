<SQL - 1일차 - SELECT>
다른 유저의 테이블을 복사

<기본>
--HR 유저의  테이블을 복사

CREATE TABLE EMP
AS
SELECT * FROM HR.EMP;

-- 테이블 내용 확인

SELELT * FROM HR.EMP;

-- 테이블 스키마<구조> 확인

DESC EMP
=====================
SELECT 절
- 컬럼명, 컬럼명, ~~
- 모든 컴럼 : *    (와일드카드)
- 수식(수학)
- 별칭 : as 
- 함수
- 서브쿼리
- ( || ) 결합 연산자

SELELT LAST_NAME, SALARY
FROM EMP;


SELECT LAST_NAME, SALARY, SALARY * 12
FROM EMP;


SELECT LAST_NAME, SALARY, SALARY * 12 AS YEAR_SALARY
FROM EMP;
--AS생략 가능
-- 컬럼의 별칭이 공백을 포함할 경우 ""

SELECT FIRST_NAME || ' ' || LAST_NAME
FROM EMP;

SELECT LAST_NAME, SALARY, SALARY, * COMMISSION_PCT
FROM EMP;

SELECT LAST_NAME, SALARY, 
    SALARY * COMMISSION_PCT AS,
    SALARY + (SALARY * NVL(COMMISSION_PCT, 0)) AS
FROM EMP;


##정렬

-- ORDER BY 절
-- ORDER BY 컬럼명 [옵션], 컬렴명[옵션], ~~
-- 옵션 :  오름차순 : ASC : 기본: 생략가능
             내림차순 : DESC
이름, 월급  단, 월급이 많은 사원부터 출력

SELECT LAST_NAME, SALARY
FROM EMP
ORDER BY SALARY DESC;


SELECT LAST_NAME, DEPARTMENT_ID, SALARY
FROM EMP
ORDER BY DEPARTMENT_ID, SALARY DESC;


SELECT LAST_NAME, DEPARTMENT_ID, SALARY
FROM EMP
ORDER BY 2,3 DESC;
==> 컬럼명 대신 사용 가능

SELECT LAST_NAME, DEPARTMENT_ID, SALARY
FROM EMP
ORDER BY HIRE_DATE DESC;
==> 기술되지 않은 컬럼으로도 정렬가능
=====================================
조건검색
-- 숫자, 문자, 날짜 검색 방법

## WHERE 절
---WHERE 조건식 AND 조건식 OR 조건식
--- 조건식 : 좌항 비교연산자 우항  (컬럼명  > = 값 )
--- 비교연산자: >= , <= , =  , ( !=, <>, ><) 


###숫자 검색법
--> 순수하게 숫자만, 콤마형식은 빼고
--> 같다 ( = )
SELECT LAST_NAME, SALARY
FROM EMP
WHERE SALARY >= 10000
ORDER BY 2 DESC;

###문자 검색법
--' 문자 또는 문자열 ' 
-- [ ' ' ] 따옴표 안의 대소문자 구별 
SELECT LAST_NAME, SALARY
FROM EMP
WHERE LAST_NAME = 'Abel';

###날짜 검색법
--'날짜' >= 날짜 인식
-- TO_DATE('날짜','패턴')

SELECT LAST_NAME, SALARY, HIRE_DATE
FROM EMP
WHERE HIRE_DATE >= '2005-01-01' ;


SELECT LAST_NAME, SALARY, HIRE_DATE
FROM 
WHERE HIRE_DATE >= TO_DATE( '2005-01-01', 'YYYY-MM-DD');

## DISTINCT
--중복제거

SELECT DISTINCT DEPARTMENT_ID
FROM EMP;
======================================

--비교연산자 : >=, <= ,= >, <, <> 
-- 그밖의 연산자(활용도 높음)
->BETWEEN .. AND
-> IN
-> LIKE
-> IS

##  BETWEEN .. AND
--범위 검색
--숫자, 날짜, 문자 검색 모두 가능
EX) 10000 ~ 15000 사이의 급여를 받는 사원의 이름과 급여

SELECT LAST_NAME, SALARY
FROM EMP
WHERE SALARY >= 10000 AND SALARY <= 15000;

SELECT LAST_NAME, SALARY
FROM EMP
WHERE SALARY BETWEEN 10000 AND 15000;
==> 최대값 AND 최대값 순서로
==> 최소값, 최대값 포함


SELECT LAST_NAME, SALARY, HIRE_DATE
FROM EMP
WHERE HIRE_DATE BETWEEN '2005-01-01' AND '2005-12-30';

##IN 
-- 목록중에 있으면~

SELECT LAST_NAME, DEPARTMENT_ID
FROM EMP
WHERE DEPARTMENT_ID IN ( 10,20,30 );

SELECT LAST_NAME, DEPARTMENT_ID
FROM EMP
WHERE DEPARTMENT_ID NOT IN ( 10, 20, 30 );


##LIKE
--패턴 검색
-- 문자 컬럼에 주로 사용
-- % => 여러문자 대신
-- _ => 한문자 대신
-- 컬럼명 LIKE('패턴')

SELECT LAST_NAME, SALARY
FROM EMP
WHERE LAST_NAME LIKE   'A%';


SELECT LAST_NAME, SALARY
FROM EMP
WHERE LAST_NAME LIKE   '____';

SELECT LAST_NAME, SALARY
FROM EMP
WHERE LAST_NAME LIKE   '%a__';

SELECT *
FROM 도서
WHERE 도서명 LIKE '%자바%' OR 도서명 LIKE '%JAVA%';


$$ IS
-- NULL 값은 비교시 반드시 IS를 사용한다.
-- 칼럼명 = NULL=> 검색 결과 없음

SELECT *
FROM EMP
WHERE COMMISSION_PCT IS NULL;

=============< 2일차 >=========
함수
- 단일행 함수 : 문자, 숫자. 날짜, 행전환, 일반
- 다중행 함수 : 구굽함수, 통계함수

## 문자 단일행 함수

SELECT  EMAIL, UPPER(EMAIL), LOWER(EMAIL), INITCAP(EMAIL)
FROM EMP;
 
SELECT  *
FROM EMP
WHERE EMAIL = UPPER('sking');

SELECT  *
FROM EMP
WHERE LOWER(EMAIL) ='sking';

** 만약에 EMAIL에 인덱스가 있는 경우 좌측 컬럼이 변형이 되면 인덱스를 사용하지 않음
** full scan 함

## substr (컬럼명, 시작위치, [가저올 문자수] )

select email, substr(email, 1, 3)
from emp;


select email, substr(email, 1, 3), substr(email, -3)
from emp;

ex) 
 사원, 주번 : 901010-1234567
    -> substr(주번, 1, 2 )  ==> 90 
    -> substr(주번, 3, 2 )  ==> 10
    -> substr(주번, 8, 1 )  , substr(주번, -7, 1 ) ==> 1
    -> substr(주번, -7 ) ==> 1234567
남자 사원만 출력

select  *
from 사원 
where substr(주번, 8 ,1) in ('1','3');

##instr
-- (칼럼명, '찾는문자또는 문자열')
-- (칼럼명, '찾는문자또는 문자열'[시작위치, 몇번째것])

select email, instr(email, 'S')
from emp;

'_' 앞 문자 '_' 뒷 문자

select job_id, substr(job_id, 1, instr(job_id, '_') -1) as 앞문자
select job_id, substr(job_id, 1, instr(job_id, '_') +1) as 뒷문자
from emp;

## length(칼럼명)
select email, length(email)
from emp;

select length('나가다%^&* asef')
from dual;
  

## trim('문자')
-- 문자 앞웨 공백을 제거함
select trim('    aaaa  adasd    ')
from dual;

## LPAD( 컬럼명, 전체자릿수, '채울문자')

select email, lpad(email, 15 ,'*')
from emp;

select email, lpad(email, 15 ,'*') , rpad(email, 15, '*')
from emp;

** 주문번호 생성

시퀀스 생성
create sequence num_seq;
--
시퀀스 사용
num_seq.nextval
주문테이블 생성
create table orders(
order_num char(14) primary key,
order_item varchar2(10)
);

주문자료 입력

insert into orders values(
to_char(sysdate, 'YYYYMMDD') || '_' || num_seq.nextval, 'AAA');

insert into orders values(
to_har(sysdate, 'YYYYMMDD') || '_' || lpad(num_seq.nextval,5,'0') , 'AAA');

## email의 앞 두자리만 표시하고 나머지는 * 로 표시 하세오

email -> em***
aaa -> aa*

RPAD(칼럼명, 전체 자릿수, '채울문자수')

select email, epad(substr(email, 1,2), length(email), '*') AD ID
form emp;

REPLACE(칼럼명, '찾는문자', '바꿀문자')
 
select email, replace(email, 'S', '****')
form emp 

==========================

숫자함수
ROUND(칼럼명, 표시할자릿수)
-- 표시할 자리수 : > 0 : 소수점 이하자릿수
-- 표시할 자리수 : < 0 : 정수부분 


select COMMISSION_PCT, 
              ROUND(COMMISSION_PCT, 1), 
              TRUNC((COMMISSION_PCT, 1)
from EMP;
=================================

날짜  함수
-- 세기, 년, 월, 일. 시. 분. 초
-- 날짜 계산 가능
-- 날짜 - 날짜 = "일자"
-- 날짜 + 숫자 => "일자"에 연산됨
-- +,- 연산만 가능

select sysdate from dual;  //오늘 날짜

select sysdate +50  from dual; // 50일 후

select trunc (sysdate - to_date('2020.01.31', 'YYYY-MM-DD'))
from dual;

add_months(날짜. 개월수)
add_months(날짜. -개월수)
select hire_date, add_months(hire_date, 5)
from emp;

select hire_date, add_months(hire_date, 5),
 	add_months(hire_date, -5)
from emp;

months_between(날짜, 날짜)
select  months_between(sysdate, to_date('2020.01.31', 'YYYY-MM-DD'))
from dual;

근속월수
select  last_name, hire_date,
          trunc(months_between(sysdate,hire_date)) AS
from emp
order by 3 desc;

## EXTRACT(기준 FROM 날짜)
2005년 입사자 정보 출력
select  *
from emp
where extract(year from hire_date) = 2005;

5월 입사자 정보
select  *
from emp
where extract(month from hire_date) = 5;

## last_date(날짜)
select hire_date, last_day(hire_date)
from emp;

## next_date(날짜, 요일) // ~몇일 후
-- 요일 => '월요일',  '월',  '숫자' : 일 월 화 수 목 금 토 -> 12.3.4.5.6.7 표현 가능
select hire_date, next_day(hire_date, 2)
from emp;

==============<일  반 함 수 >======================

NVL(칼럼명, null 일 경우 대신할 값) ==> ****

select last_name, salary, salary * nvl(COMMISSION_PCT) AS 수당,
 	salary + ( salary * nvl((COMMISSION_PCT,0 )) AS 수당 지급
 from emp;
order by 수당 desc;

*****
select
from
where
group by
having
order by

쿼리 실행순서

from -> where -> group by -> having -> select -> order by
=========================================

부서가 있으면 => 부서 배정됨
부서가 없으면 => 부서 미배정

select last_name, department_id, 
nvl2(department_id, '부서 배정', '부서미배정')AS 부서배정
from emp;


## CASE문 ( = DECODE()함수 )
--쿼리안의 조건문

보너스 월급의 2배
select last_name, salary, salary *2 AS BONUS
from emp;

부서별로 보너스 차등 지급

10번 2배 , 20번 3배, 40번 4배 ...
select last_name, salary, 
  	case department_id
	when 10  then salary *2
	when 20  then salary *3
	when 40  then salary *4
	else
	salary * 1
	end AS BONUS
from emp;
===================================
select last_name, salary, 
  	case 
               when    department_id = 10  then salary *2
               when    department_id = 20  then salary *3
               when    department_id = 40  then salary *4
	else
	salary * 1
	end AS BONUS
from emp;
===================================
select last_name, salary, 
  	decode( department_id,
	10  salary *2
	20  salary *3
	40  salary *4, salary * 1)
	AS BONUS
from emp;
=============================
select last_name, salary, 
  	case 
               when   JOB_ID LIKE '%CLERK%'  then salary *2
               when   JOB_ID LIKE '%MAN%' then salary *3
               when   JOB_ID LIKE '%REP%'  then salary *4
	else
	salary * 1
	end AS BONUS
from emp;
==============<형 전환 함수>============
-- TO_DATE
-- TO_CHAR
-- TO_NUMBER

## TO_CHAR
-- 숫자나 날짜를 문자로 전환한다

SELECT SALARY, TO_CHAR(SALARY, '$999,999')
FROM EMP;


SELECT SALARY, TO_CHAR(SALARY, '$9,999')
FROM EMP;
====> 자료값보다 적은 포멧은 ## 으로 출력됨

SELECT SALARY, TO_CHAR(SALARY, '$00,000')
FROM EMP;


SELECT  TO_CHAR(0, '9'), TO_CHAR(0, '0')
FROM DUAL;

SELECT SALARY, TO_CHAR(SALARY, 'L999,999')
FROM EMP;

--- 날짜를 문자로 전환  [ DY(요일) ]

SELECT  SYSDATE, TO_CHAR(SYSDATE, 'MM-DD. YYYY')
FROM DUAL; // 날짜

SELECT  TO_CHAR(SYSDATE, 'YY-MM-DD-HH-MI-SS')
FROM DUAL; // 시분초 까지

SELECT  TO_CHAR(SYSDATE, 'YY-MM-DD AM HH-MI-SS')
FROM DUAL;  // 오전, 호우

SELECT  TO_CHAR(SYSDATE, 'YY-MM-DD DY AM HH-MI-SS')
FROM DUAL; // 요일


SELECT  TO_CHAR(SYSDATE, 'YY-MM-DD(DY) HH24:MI:SS')
FROM DUAL;  // 24 시간 형식

===============<그룹함수>==============

함수
-- 단일행함수 :  문자, 숫자, 날짜, 형전환, 일반
-- 다중행함수 : 그룹함수, 통계함수

## 다중함수
==> sum(칼럼명) count, min, max, avg --> NULL은 제외

우리회사 총사원수?

select count(*) AS 총사원수
from emp;

--> count(*) ==> row의 수
--> count(칼럼명) ==> NULL의 제외한 자료의 겟수

select max(salary), min(salary)
from emp;
------------------------------------------

## GROUP BY
-- 그룹함수는 GROUP BY 절과 함께 많이 쓰인다.
부서별 근무인원수


select department_id, job_id, count(*) AS 인원수
from emp
group by department_id,job_id
order by 1;
select ==> 절에 그룹을 제외한 칼럼은 GROUP BY절에 기술되야함

## HAVING 절
--HAVING 조건식 AND 조건식 or 조건식

부서별 인원수 검색, 단 인원수 10명 이상인 부서만 출력
select department_id , count(*) AS 인원수
from emp
group by department_id
having count(*) >= 10
order by 1;

## 입사년도 별 인원수 출력하기
 
select to_char(hire_date, 'YYYY') AS 입사년도, count(*) AS 인원수
from emp
group by to_char(hire_date, 'YYYY')
order by 1;

## 예제1

주문 (주문번호, 주문자, 주문상품, 수량, 주금총금액, 주문일자)

월별 매출 집계
select to_char(주문일자, 'mm') AS 월, sum(주문총금액) AS 월별매출
from emp
group by to_char(주문일자, 'mm')
order by 1;

"지난달"에 500.000 이상 구매한 주문자와 주문 총 금액
select 주문자, sum(주문총금액) AS 월구매금
from emp
where extract(omnth from 주문일자) = extract(month from sysdate) -1
group by 주문자
having sum(주문총금액) >= 500.000
order by 2 desc;

====================================
select name, birth,
	to_char(sysdate, 'YYYY') - to_char(birth, 'YYYY') +1 AS AGE,
	trunc(to_char(sysdate, 'YYYY') - to_char(birth, 'YYYY') + 1, -1) AS 연령대
from emp1;

select * from emp1; 

trunc(to_char(sysdate, 'YYYY') - to_char(birth, 'YYYY') + 1, -1) AS 연령대
  count(*) AS 인원수
  count(*)  / (select counct(*) from emp1), 2) * 100 || '%' AS 비율
from emp1;
group by trunc(to_char(sysdate, 'YYYY') - to_char(birth, 'YYYY') + 1, -1)
order by 1;

==============<3일차>===========
JOIN문 

create table dept
as
select * from HR.DEPT;


create table LOCATIONS    //테이블을 새로 생성한다
as
select * from HR.LOCATIONS;

create table JOB_GRADES
as
select * from HR.JOB_GRADES;
------------------------------------------

##쪼인
## EQUI JOIN ( = 동등 조인 검색법 )
## 오라클 전용 구문 검색법

사번, 이름, 부서명 검색법

select EMPLOYEE_ID, LAST_NAME, DEPARTMENT_NAME
from emp, dept, SALGRADE
where emp.DEPARTMENT_ID = dept.DEPARTMENT_ID ;

## 표준 구문 검색법

select EMPLOYEE_ID, LAST_NAME, DEPARTMENT_NAME
from emp join dept on (emp.DEPARTMENT_ID = dept.DEPARTMENT_ID);
_________________
-- 두 테이블에 같은 칼럼명이 있을 경우
select EMPLOYEE_ID, LAST_NAME, DEPARTMENT_NAME
from emp join dept using (DEPARTMENT_ID);

## 성능을 향상 시킬 수 있는 방법
-- 테이블의 별칭을 이용하여 칼럼의 위치를 한정한다.
-- 테이블 이름이 길을때 줄여주기 위해서 별칭을 사용한다 ( ex. E, D )

select E.EMPLOYEE_ID, E. LAST_NAME, D.DEPARTMENT_NAME
from emp E join dept D 
        on (E. DEPARTMENT_ID = D. DEPARTMENT_ID);
-------------------------------

## 여러개의 테이블 조인하기
-- 테이블은 2개씩 조인된다.

-오라클 버전
select *
from A,B,C
where A.a = B.a and B.c = C.c ;

-표준 버전
select *
from ( A join B on (A.a = B.a) ) join C on (A.C=C.c)

-----------------------------------------------------------
## OUTER JOIN

## 오라클 전용 구문
--LEFT OUTER JOIN
-- RIGTH OUTER JOIN
-- FULL OUTER JOIN ==> 지원 하지 않음

--LEFT OUTER JOIN
select EMPLOYEE_ID, LAST_NAME, DEPARTMENT_NAME
from emp, dept
where emp.DEPARTMENT_ID = dept.DEPARTMENT_ID(+) ;    // [ + ] 기호
                                                               //    오른쪽
-- RIGTH OUTER JOIN
select EMPLOYEE_ID, LAST_NAME, DEPARTMENT_NAME
from emp, dept
where emp.DEPARTMENT_ID(+) = dept.DEPARTMENT_ID ; 
                        //         왼쪽

## 표준 구문
-- LEFT OUTER JOIN
-- RIGTH OUTER JOIN
-- FULL OUTER JOIN 
-- OUTER 생략 가능

select EMPLOYEE_ID, LAST_NAME, DEPARTMENT_NAME
from emp LEFT OUTER JOIN  dept using (DEPARTMENT_ID);

select EMPLOYEE_ID, LAST_NAME, DEPARTMENT_NAME
from emp RIGTH OUTER JOIN  dept using (DEPARTMENT_ID);

## NON-EQUI JOIN

- 사원의 월급레벨 검색
이름, 월급, 월급레벨

select E.last_name, E.salary, G.grade_level
from emp E join job_grades G
where E.salary between G.lowest_sal and G.highest_sal ;

select E.last_name, E.salary, G.grade_level
from emp E join job_grades G
	on (E.salary between G.lowest_sal and G.highest_sal);
--------------------------------------------------------------------

## SELF JOIN
-- 테이블의 별칭을 다르게 지정하여 일반 조인 처럼 조인한다
-- 사번, 이름, 상관이름

select E.EMPLOYEE_ID, E.LAST_NAME, M.last_name
from emp E join emp M  
        on (E.MANAGER_ID = M.EMPLOYEE_ID);

------------------------------------------------------------

========<3일차 서브쿼리>=========

## 서브쿼리
-- 쿼리 안의 쿼리
-- ( 서브쿼리 ) 로 감싼다
-- 실행순서 : 서브쿼리 -> 메인쿼리
-- 서브쿼리의 결과 NULL 이면 메인 쿼리도 무조건 NULL이다
-- 사용위치 
  - SELECT 절 : 함수로 구현하여 사용된다,,, 요즘 추세
  - FROM 절 : IN-LINE 뷰, 라고 한다
  - WHERE 절 : 조건식의 우항쪽에 기술

-- 'Chen' 보다 많은 급여를 받는 사원의 이름과 급여

SELECT LAST_NAME, SALARY
FROM EMP
WHERE SALARY > (SELECT SALARY
		FROM EMP
		 WHERE LAST_NAME = 'Chen' )
ORDER 2 DESC ;

-- 평균 급여 보다 많이 받는 사원은?

SELECT LAST_NAME, SALARY
FROM EMP
WHERE SALARY > (SELECT AVG(SALARY) FROM EMP );
ORDER 2 DESC ;            // 평균값

-- 우리 회사에서 급여를 가장 많이 받는 사람은?

SELECT LAST_NAME, SALARY
FROM EMP
WHERE SALARY = (SELECT MAX(SALARY) FROM EMP );
ORDER 2 DESC ;         // 최대값


-- 'Chen'  과 같은 부서의 근무하는 사람은?

SELECT LAST_NAME, DEPARTMENT_ID
FROM EMP
WHERE DEPARTMENT_ID = ( SELECT DEPARTMENT_ID
			FROM EMP
			WHERE LAST_NAME = 'Chen')


-- 'IT' 부서에 근무 하는 사원의 정보

SELECT *
FROM EMP
WHERE DEPARTMENT_ID = ( SELECT DEPARTMENT_ID
			FROM DEPT
			WHERE DEPARTMENT_NAME = 'IT');

--'seattle' 에 근무하는 사원

SELECT *
FROM EMP
WHERE DEPARTMENT_ID = ( SELECT DEPARTMENT_ID
			FROM DEPT
			WHERE LOCATION_ID = 
				(SELECT LOCATION_ID
				FROM LOCATIONS
				WHERE CITY LIKE '%seattle%'	));
===>> 오류 발생 = 다중의 결과로 인하여



SELECT *
FROM EMP
WHERE DEPARTMENT_ID IN ( SELECT DEPARTMENT_ID
			FROM DEPT
			WHERE LOCATION_ID = 
				(SELECT LOCATION_ID
				FROM LOCATIONS
				WHERE CITY LIKE '%Seattle%'));
## 단일행 비교 연산자
--- >,<,=,<=,>=,=,<>

## 다중행 비교 연산자
--- IN, 비교연산자 ANY, 비교연산자 ALL
-- IN , >= ANY,  <=ALL

SELECT SALARY
FROM EMP
WHERE JOB_ID LIKE 'IT%'; 


SELECT *
FROM EMP
WHERE SALARY >= ANY	
	(SELECT SALARY
	FROM EMP
	WHERE JOB_ID LIKE 'IT%'); 
---------------------------------------------------------------
## TOP.N 알고리즘

-- FROM 절에 서브쿼리 -> INLINE VIEW
-- 잠깐 생성이 됬다가 사라지는 테이블

고액연봉자 10명 뽑기

SELECT *
FROM EMP
WHERE SALARY >= 20000;

SELECT LAST_NAME, SALARY 
FROM EMP
ORDER BY SALARY DESC;

-- ROWNUM 칼럼 ==> 의사칼럼(줄번호)

SELECT ROWNUM AS 순위, LAST_NAME, SALARY 
FROM (SELECT LAST_NAME, SALARY 
	FROM EMP
	ORDER BY SALARY DESC)  // [DESC 오름차순]
WHERE ROWNUM <= 10;    // [10명 뽑는다]

=============================
## 연습쿼리

회원 ( 회원번호, 회원이름, 이메일, .... )
상품 ( 상품번호, 상품명, 가격, .... )
주문 ( 주문번호, 주문번호, 상품번호, 갯수, 총주문액, 주문날짜 ) 

-- 지난달 베스트 상품 10개
-- 순위, 상품명, 판매갯수
==============================================
SELECT 상품번호, SUM(갯수) AS 판매수량
FROM 주문
WHERE TO_CHAR(주문날짜, 'YYYY') = TO_CHAR(SYSDDATE, 'YYYY') -1
GROUP BY 상품번호
ORDER BY 2 DESC
==========================================
SELECT ROWNUM AS 순위, 상품명, 판매수량
FROM 상품 JOIN (
		SELECT 상품번호, SUM(갯수) AS 판매수량
		FROM 주문
		WHERE TO_CHAR(주문날짜, 'YYYY') = TO_CHAR(SYSDDATE, 'YYYY') -1
		GROUP BY 상품번호
		ORDER BY 2 DESC) USING (상품번호)
WHERE ROWNUM <= 10;
================================================

==================<4일차 DML DDL>=============

## DML

-- CRUD : 추가, 조회, 수정, 삭제
-- IN)SET, UPDATE, DELETE ==> 로그가 남는다 -->복구 가능

CREATE TABLE TT1(
NUM  NUMBER(5)   PRIMARY KEY,
NAME VARCHAR2(30),
BIRTH DATE
);

INSERT INTO TT1(NUM, NAME, BIRTH) VALUES( 111, '이주현', '1993-01-31');

INSERT INTO TT1 VALUES( 222, '홍길동', '1996-01-31');

INSERT INTO TT1 VALUES( 333, '고릴라', NULL);

-- 다른 테이블의 자료를 읽어서 대량으로 입력하는 방법
-- 데이터 타입과 크기가 같아야 한다.

CREATE TABLE TT2(
NUM  NUMBER(6)   PRIMARY KEY,
NAME VARCHAR2(20),
BIRTH DATE
);

INSERT INTO TT2
 SELECT EMPLOYEE_ID, LAST_NAME, HIRE_DATE
 FROM EMP
 WHERE JOB_ID LIKE 'IT%';

----------------------------------------------------
## UPDATE
-- 변경하고자 하는 행의 조건을 WHERE에 기술한다
-- ★WHERE절 생략시 모든 행의 컬럼의 값이 변경된다 
-- NUM 105 인 자료의 NAME -> 'AAA' 로 수정

UPDATE TT2
SET NAME = 'AAA' ,  BIRTH = '2000-10-10'
WHERE NUM = 105;


-- 'Chen'의 급여를 'Gee'급여로 수정하라

UPDATE EMP
SET SALARY = ( SELECT SALARY 
		FROM EMP
		WHERE LAST_NAME = 'Gee')
WHERE LAST_NAME = 'Chen';
--------------------------------------------------------
##DELETE
--조건에 맞는 ROW 삭제
--WHERE 반드시 사용하기 <안하면 전부 삭제됨>

DELETE FROM 테이블 명;  ==> 입력된 모든 행이 삭제됨, 스키마만 남는다!

2007년 생일인 정보를 삭제

DELETE FROM TT2
WHERE TO_CHAR(BIRTH, 'YYYY') = '2007';
-------------------------------------------------------------------------------------

##트렌잭션

-- 하나의 업무단위 : 이체, 가입, 탈퇴..
-- DML문 의 묶음 단위
-- 트랜잭션의 특징 : 원자성, 일관성, 지속성, 


INSERT INTO TT2 VALUES (111, 'BBB', '2000-10-10');
INSERT INTO TT2 VALUES (111, 'CCC', '2010-11-10');
INSERT INTO TT2 VALUES (111, 'DDD', '2020-12-10');

###트랜잭션 연산
--> COMMIT;      --> 서버에 넘겨서 저장한다
--> ROLLBACK;

## DDL
-- CREATE, ALTER, DROP
-- AUTO COMMIT 설정
-- 단독 트랜잭션

## DML
-- INSERT, UPDATE, DELETE
-- AUTO COMMIT OFF -->  묶어서 작업 가능

## AUTO COMMIT
--DDL 사용전
--정상적 로그아웃

## AUTO ROLLBACK
-- 시스템 오류
-- 비정상적 로그아웃
-----------------------------------------------------------------
## SAVE POINT 지정하기
--SAVE POINT [세이브포인트명] ;
-- 하나의 트렌잭션의 일부만 COMMIT 또는 ROLLBACK 할 수 있다

CREATE TABLE TT3(
A NUMBER(3),
B NUMBER(3)
);

INSERT INTO TT3 VALUES (111,222);
INSERT INTO TT3 VALUES (111,222);
INSERT INTO TT3 VALUES (111,222);

SAVEPOINT SP1;

INSERT INTO TT3 VALUES (222,222);
INSERT INTO TT3 VALUES (222,222);
INSERT INTO TT3 VALUES (222,222);

ROLLBACK TO SP1 ;

COMMIT ;
======================================
##DDL
-- CREATE,

-- 테이블 생성
-- CREATE

CREATE TABLE TT4 (
 A    NUMBER(3),
 B    VARCHAR2(20)
);

--테이블 구조변경
-- ALTER
-- ADD : 칼럼 추가
-- OMDIFY : 데이터 타입 변경 ( 사이즈 확장)
-- DROP : 칼럼 삭제

ALTER TABLE TT4
ADD ( C VARCHAR2(30), D DATE);

ALTER TABLE TT4
MODIFY A NUMBER(5);

ALTER TABLE TT4
DROP ( C , D ) ;

##DROP
-- 테이블 삭제
-- 테이블 전부 삭제 : 스키마 + 자료
DROP TABLE TT1;

## TRUNCATE
-- 테이블 절단 : 자료만 삭제 -> 스키마는 남는다

TRUNCATE TABLE TT2;

--------------------------------------------------------------------------------------
명령어                구분    |    로그   |   복구    |   삭제                    활용성
---------------------------------------------------------------------------------------
DELETE                DML   |     YES   |    YES    |  ROW                    혹시 모를때
TRUNCATE           DDL    |     NO   |    NO    |  자료모두               뒤가 없을때
DROP                  DDL    |     NO   |    NO    |  스키마 + 자료        뒤가 없을때
----------------------------------------------------------------------------------------

## 테이블 이름을 변경

RENAME TT3 TO TEST ;


## 테이블 딕셔너리
-- USER_TABLES

SELECT *
FROM USER_TABLES;

SELECT *
FROM TAB;


=====================
## 테이블 제약 조건

## 제약조건
--- 기본키
--- 외래키
--- UNIQUE
--- NOT NULL
--- CHECK (조건식)

T_DEPT (DEPT_NO, DEPT_NAME )
T_EMP (EMP_ID, NAME, GENDER, EMAIL, HIRE_DATE, DEPT_NO )

** 부모 테이블 생성 -> 자식 테이블을 생성

CREATE TABLE T_DEPT(
 DEPT_NO        NUMBER(2)      PRIMARY KEY,
 DEPT_NAME    VARCHAR(50)   NOT NULL
);


CREATE TABLE T_EMP (
 EMP_ID      NUMBER(3)   PRIMARY KEY,
 NAME      VARCHAR2(5)   NOT NULL,
 GENDER      CHAR(1)      CHECK ( GENDER  IN ('F','M')),
 EMAIL      VARCHAR2(100)   UNIQUE,
 HIRE_DATE   DATE      DEFAULT SYSDATE,
 DEPT_NO      NUMBER(2)   REFERENCES T_DEPT(DEPT_NO)   

);  //REFERENCE 동일타입이어야   

CREATE TABLE AA (
 A NUMBER(3)
, B NUMBER(3)
, C NUMBER(3)
, D NUMBER(3)
);

INSERT INTO T_DEPT VALUES (10 , '생산부');
INSERT INTO T_DEPT VALUES (20 , '판매부');
INSERT INTO T_DEPT VALUES (30 , '운영부');

INSERT INTO T_DEPT VALUES (30 , '운영부');
---> 오류


INSERT INTO T_DEPT VALUES (30 , NULL);
--> NULL 오류


## 제약 조건 확인
-- USER_CONSTRAINTS

SELECT *
FROM USER_CONSTRAINTS;
WHERE TABLE_NAME = 'T_DEPT';
==> 테이블명은 대문자로


T_EMP (EMP_ID, NAME, GENDER, EMAIL, HIRE_DATE, DEPT_NO )
 // 성별에 잘못 된 것이 입력 됬을 때
INSERT INTO T_EMP 
	VALUES(200, 'BBB', 'A', 'A@NAVER.COM', '2000-10-10', 10);
===>  check constraint (DA14.SYS_C00420794) violated
            오류 내용
INSERT INTO T_EMP 
	VALUES(100, 'AAA', 'M', 'A@NAVER.COM', '2000-10-10', 10);
==> unique constraint (DA14.SYS_C00420795) violated  
        오류 내용

##제약조건 기술시 제약조건명을 생략하면
-- 시스템이 알아서 이름을 부여==> SYS_Cxxxxxx 등과 같이 임의로
-- 어느 테이블에 어떤 컬럼에 어떤 제약 조건인지 제약조건명으로 확인이 어려움.
-- 명시적으로 부여시 : 테이블_컬럼_제약조건타입 => EMP_NAME_NN

## 제약조건 기술
-- 컬럼 레벨 : 컬럼 옆으로 기술
	-> NOT LULL 반드시 칼럼 레벨에 기술

-- 테이블 레벨 : 칼럼 을 모두  기술하고 그 밑으로 기술
	-> 기본키가 복합키인 경우 반드시 테이블 레벨에 기술

CREATE TABLE TT1(
A NUMBER(2) ,
B NUMBER(2) ,

CONSTRAINT TT1_A_PK PRIMARY KEY ( A )
);

==> 수정 

CREATE TABLE TT1(
A NUMBER(2) ,
B NUMBER(2) NOT NULL ,

CONSTRAINT TT1_A_PK PRIMARY KEY ( A )
);

## 기본키가 복합키 인경우
CREATE TABLE TT1(
A NUMBER(2) PRIMARY KEY,
B NUMBER(2) PRIMARY KEY,
C NUMBER(2) 

);
==> 칼럼 레벨에 제약조건 기술이 안됨

CREATE TABLE TT1(
A NUMBER(2) ,
B NUMBER(2) ,
C NUMBER(2) 

CONSTRAINT TT1_A_PK PRIMARY KEY ( A,B)
);


-------------------------------------------------------
## 제약조건 활성화 (기본) / 비활성화

-- 비활성화

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'T_EMP';

비활성화



## 테이블 생성 방법

1, CREATE TABLE 테이블명 (.....) ;
    => 스키마만 생성

2, CREATE TABLE 테이블명
   AS
  SELECT * FROM 유저, 테이블명 ;
=> 스미카 + 자료
=> 제약조건 NOT NULL 복사


3, 기존테이블에 스키마만 복사  (스키마 = 껍데기)
CREATE TABLE TTT_EMP
AS
SELECT * 
FROM T_EMP
WHERE 1 <> 1 ;

==========================
##VIEW

-- 가상의 테이블 -> 물리적 테이블이 아님, 테이블 처럼 사용 가능
-- 사용 목적 : 보안(컬럼의 대한 접근 제한), 편리성
-- SELECT 문이 저장된 객체

-- 뷰 관련 딕셔너리 -> USER_VIEWS

## 뷰 생성

CREATE VIEW 뷰 명
AS
SELECT 구문,,  ;

CREATE OR REPLACE VIEW 뷰 명
AS
SELECT 구문,,  ;

---읽기 전용 뷰
-- 뷰를 통한 DML(수정) 작용 불가
CREATE VIEW 뷰 명
AS
SELECT 구문,, 
WITH READ ONLY;

--ALTER VIEW 사용하지 않는다

## 뷰 사용
-- 일반 테이블 사용과 동일

## 뷰 삭제

DROP VIEW 뷰 명 ;


## 뷰와 관련된 권한
-- CREATE VIEW : SYSTEM 계정에서 권한 부여한다.

## 뷰의 종류

		단순 뷰 			복합 뷰
----------------------------------------------------------------------------------
테이블 수 :              ONE                            ONE OR MORE
함수 :                      NO                                  YES
그룹 :                      NO                                  YES
DML 여부                YES                             NOT ALWAYS 
--------------------------------------------------------------------------------------

## 단순 뷰

CREATE VIEW EMP_20
AS
SELECT LAST_NAME, SALARY
FROM EMP;
WHERE DEPARTMENT_ID = 21;

## 복합뷰

CREATE VIEW EMP_DT
AS
SELECT LAST_NAME, SALARY, DEPARTMENT_NAME
FROM EMP JOIN DEPT USING(DEPARTMENT_ID);


CREATE VIEW EMP_DTT
AS
SELECT DEPARTMENT_ID, COUNT(*) AS MANS
FROM EMP
GROUP BY DEPARTMENT_ID
ORDER BY 1 ;

## 뷰 확인

SELECT *
FROM USER_VIEWS;

## 뷰 사용
SELECT *
FROM EMP_DT;

## 복합 뷰에 자료 입력

INSERT INTO EMP_DT VALUES('AA',111,'BBB');

## 단순뷰에서 DML 작업하기

CREATE TABLE TT1 (NAME, SALARY, JOB )
AS
SELECT LAST_NAME, SALARY, JOB_ID
FROM EMP
WHERE JOB_ID LIKE 'IT%' ;

==> VIEW 생성

CREATE OR REPLACE VIEW TT1_VU
AS
SELECT NAME, JOB
FROM TT1
WITH  READ ONLY;

==> INSERT

INSERT INTO TT1_VU VALUES('AAA', 'IT') ;

==========<5일차 오라클 객체>==============
## 시퀀스
-- 기본키 생성용 일련번호
-- 번호가 일관성을 보장하지는 않는다
  ==> INSERT 오류, 드렌젝션 ROLLBACK

## 시퀀스

1부터 1씩 무한대로 증가하는 시퀀스
CREATE SEQUENCE EMP_SEQ;

-- 옵션 : 옵션 순서, 상관 없음

CREATE SEQUENCE EMP_SEQ
	START WITH 1
	INCREMENT BY 1
	MAXVALUE 99999
	NOCYCLE
	NOCACHE;

## 시퀀스 속성
-- 시퀀스명.NEXTVAL ==> INSERT 문의 VALUES 절 사용
-- 시퀀스명.CURRVAL

## 시퀀스 사용을 위한 테이블 생성

CREATE TABLE TEST(
A NUMBER(5) PRIMARY KEY,
B VARCHAR(10)
);


## 시퀀스 사용

INSETR INTO TEST VALUES(EMP_SEQ.NEXTVAL, 'AAA');


## 시퀀스 확인

SELECT * FROM USER_SEQUENCES;

## 시퀀스 수정
-- start wlth 옵션을 제외하고 나머지 옵션을 수정 가능
-----------------------------------------------------------

## 일관성을 보장하는 기본키 일련번호 생성하기


TRUNCATE TABLE TEST;

INSETR INTO TEST 
   VALUES( (SELECT COUNT(*) +1 FROM TEST), 'AAA');

INSETR INTO TEST 
   VALUES( (SELECT max(A) +1 FROM TEST), 'AAA');
------------------------
COMMIT;

ROLLBACK;

SELECT  *
FROM TEST;

===================================

## 인덱스 : index

-- 검색속도 향상을 원할때 사용한다
-- 기본키와 유일키 컬럼은 자동으로 인덱스 생성

CREATE INDEX EMP_IDX ON EMP (EMPLOYEE_ID);

##  검색

SELECT * 
FROM EMP
WHERE EMPLOYEE_ID = 105;
==>0.14초

SELECT * 
FROM EMP1   <-- 인덱스로 만든 컬럼
WHERE EMPLOYEE_ID = 105;
==> 0.01초    // 검색 속도가 빠르다

## 인덱스 삭제

DROP INDEX 인덱스 명;

## 인덱스 수정
-- 인덱스는 수정하지 않음 => REBUILD

ALTER INDEX EMP_IDX REBULID;

## 인덱스의 종류 :  성격에 따른 분류

-- 고유 인덱스 : 기본키, 유일키 생성되는 인덱스 => 오라클이 자동생성
-- 비고유 인덱스 : 검색속도 향상을 위해서 사용자가 생성

## 인덱스의 종류 : 형태에 따른 종류

-- 단일인덱스 : 컬럼 하나
-- 결합인덱스 : 컬럼 두개 이상

SELECT *
FROM EMP
WHERE DEPARTMENT_ID = 80 AND JOB_ID = 'IT_PROG;'

CREATES INDEX EMP_DEPT_JOB_ID_IDX ON EMP (DEPARTMENT_ID , JOB_ID ); 

-- 함수기반 인덱스 : 

SELECT *
FROM EMP
WHERE SALARY * 12 >= 10000 ;

CREATE INDEX EMP_SALARY_IDX
	ON EMP(SALARY * 12) ;

SELECT *
FROM EMP
WHERE UPPER(LAST_NAME) = 'AAA' ;


CREATE INDEX EMP_SALARY_IDX
	ON EMP(UPPER (LAST_NAME ) ) ;

-- 기본키가 복합키인 경유 첫번째 컬럼의 대해서만 인덱스가 형성됨

## 인덱스 확인


SELECT *
FROM USER_IND_COLUMNS ;

========================================

## 시노임

CREATE SYNONYM 시노임 이름 FOR 기존테이블 명 ;

CREATE SYNONYM E FOR EMP;


CREATE [ PUBLIC / PRIVATE ] SYNONYM E FOR EMP;




==================< 시스템 어드민 > ==================


-- system 권한에서 생성가능

CREATE user aa01 IDENTIFIED by aa01 ;
GRANT CONNECT, RESOURCE, CREATE view to aa01 ;

--hr 계정을 활성화

alter user hr account unlock;

-- hr  계정의 비밀번호 변경

alter  user hr IDENTIFIED by hr;


-- hr  계정에서 작업

alter select on employees to public ;
alter select on departments to public ;
alter select on jobs to public ;


## SET 연산사   (서로 다른 테이블 간의 비교)

SELECT EMPLOYEE_ID, JOB_ID
FROM EMP
UNION
SELECT EMPLOYEE_ID, JOB_ID
FROM JOB_HISTORY;
==> 중복행은 한번만/////////////////////////////
SELECT EMPLOYEE_ID, JOB_ID
FROM EMP
UNION ALL              <------------------- 다른 조건
SELECT EMPLOYEE_ID, JOB_ID
FROM JOB_HISTORY;
///////////////////////////
CREATE TABLE TT5
AS
SELECT EMPLOYEE_ID, JOB_ID
FROM EMP
INTERSECT              <------------------- 다른 조건
SELECT EMPLOYEE_ID, JOB_ID
FROM JOB_HISTORY;
///////////////////////////////////
SELECT EMPLOYEE_ID, JOB_ID
FROM EMP
MINUS                   <------------------- 다른 조건
SELECT EMPLOYEE_ID, JOB_ID
FROM JOB_HISTORY
ORDER BY 2 ;                      <-------------- 정렬
===> 전체 UNION 이후 정렬

SELECT EMPLOYEE_ID AS ID, JOB_ID AS JOB  <-- 이름이 다를 경우
FROM EMP
MINUS                   
SELECT EMPLOYEE_ID, JOB_ID
FROM JOB_HISTORY ;

SELECT department_id, TO_NUMBER (null) location, hire_date
FROM emp
UNION
SELECT department_id, location_id, TO_DATE (null)
FROM dept ;



